;; Analyzed by ClojureScript 1.7.145
{:name cats.protocols, :doc "A collection of protocols upon which the cats abstractions are built.\n\n  NOTE: Functions of this namespace are not intended to be used directly.\n  It is considered internal api.", :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires nil, :imports nil, :defs {Monad {:meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 82, :column 14, :end-line 82, :end-column 19, :doc "The Monad abstraction.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-mreturn [[m v]], -mbind [[m mv f]]}}}, :protocol-symbol true, :name cats.protocols/Monad, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 19, :column 1, :line 82, :protocol-info {:methods {-mreturn [[m v]], -mbind [[m mv f]]}}, :info nil, :end-line 82, :impls #{}, :doc "The Monad abstraction.", :jsdoc ("@interface")}, Functor {:meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 57, :column 14, :end-line 57, :end-column 21, :doc "A data type that can be mapped over without altering its context.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-fmap [[ftor f fv]]}}}, :protocol-symbol true, :name cats.protocols/Functor, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 21, :column 1, :line 57, :protocol-info {:methods {-fmap [[ftor f fv]]}}, :info nil, :end-line 57, :impls #{}, :doc "A data type that can be mapped over without altering its context.", :jsdoc ("@interface")}, -mempty {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 50, :column 4, :end-line 50, :end-column 11, :protocol cats.protocols/Monoid, :doc "The identity element for the given monoid.", :arglists (quote ([s]))}, :protocol cats.protocols/Monoid, :name cats.protocols/-mempty, :variadic false, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 11, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "The identity element for the given monoid."}, -fapply {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 63, :column 4, :end-line 63, :end-column 11, :protocol cats.protocols/Applicative, :doc "Applies the function(s) inside af's context to the value(s)\n     inside av's context while preserving the context.", :arglists (quote ([app af av]))}, :protocol cats.protocols/Applicative, :name cats.protocols/-fapply, :variadic false, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 11, :method-params ([app af av]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 63, :max-fixed-arity 3, :fn-var true, :arglists (quote ([app af av])), :doc "Applies the function(s) inside af's context to the value(s)\n     inside av's context while preserving the context."}, Applicative {:meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 61, :column 14, :end-line 61, :end-column 25, :doc "The Applicative abstraction.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-fapply [[app af av]], -pure [[app v]]}}}, :protocol-symbol true, :name cats.protocols/Applicative, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 25, :column 1, :line 61, :protocol-info {:methods {-fapply [[app af av]], -pure [[app v]]}}, :info nil, :end-line 61, :impls #{}, :doc "The Applicative abstraction.", :jsdoc ("@interface")}, -foldl {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 72, :column 4, :end-line 72, :end-column 10, :protocol cats.protocols/Foldable, :doc "Left-associative fold of a structure.", :arglists (quote ([fctx f z xs]))}, :protocol cats.protocols/Foldable, :name cats.protocols/-foldl, :variadic false, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 10, :method-params ([fctx f z xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 72, :max-fixed-arity 4, :fn-var true, :arglists (quote ([fctx f z xs])), :doc "Left-associative fold of a structure."}, -mbind {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 85, :column 4, :end-line 85, :end-column 10, :protocol cats.protocols/Monad, :doc nil, :arglists (quote ([m mv f]))}, :protocol cats.protocols/Monad, :name cats.protocols/-mbind, :variadic false, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 10, :method-params ([m mv f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 85, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m mv f])), :doc nil}, Contextual {:meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 36, :column 14, :end-line 36, :end-column 24, :doc "Abstraction that establishes a concrete type as a member of a context.\n\n  A great example es Maybe monad type Just. It implements\n  this abstraction for establish that Just is part of\n  Maybe monad.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-get-context [[_]]}}}, :protocol-symbol true, :name cats.protocols/Contextual, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 24, :column 1, :line 36, :protocol-info {:methods {-get-context [[_]]}}, :info nil, :end-line 36, :impls #{}, :doc "Abstraction that establishes a concrete type as a member of a context.\n\n  A great example es Maybe monad type Just. It implements\n  this abstraction for establish that Just is part of\n  Maybe monad.", :jsdoc ("@interface")}, -traverse {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 78, :column 4, :end-line 78, :end-column 13, :protocol cats.protocols/Traversable, :doc "Map each element to an Applicative, evaluate the applicatives from left\n     to right and collect the results.", :arglists (quote ([tctx f tv]))}, :protocol cats.protocols/Traversable, :name cats.protocols/-traverse, :variadic false, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 13, :method-params ([tctx f tv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 78, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tctx f tv])), :doc "Map each element to an Applicative, evaluate the applicatives from left\n     to right and collect the results."}, -foldr {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 73, :column 4, :end-line 73, :end-column 10, :protocol cats.protocols/Foldable, :doc "Right-associative fold of a structure.", :arglists (quote ([fctx f z xs]))}, :protocol cats.protocols/Foldable, :name cats.protocols/-foldr, :variadic false, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 10, :method-params ([fctx f z xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 73, :max-fixed-arity 4, :fn-var true, :arglists (quote ([fctx f z xs])), :doc "Right-associative fold of a structure."}, -extract {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 55, :column 4, :end-line 55, :end-column 12, :protocol cats.protocols/Extract, :doc "Extract the value from monad context.", :arglists (quote ([mv]))}, :protocol cats.protocols/Extract, :name cats.protocols/-extract, :variadic false, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 12, :method-params ([mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mv])), :doc "Extract the value from monad context."}, MonadPlus {:meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 92, :column 14, :end-line 92, :end-column 23, :doc "A complement abstraction for Monad that\n  supports the notion of addition.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-mplus [[m mv mv']]}}}, :protocol-symbol true, :name cats.protocols/MonadPlus, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 23, :column 1, :line 92, :protocol-info {:methods {-mplus [[m mv mv']]}}, :info nil, :end-line 92, :impls #{}, :doc "A complement abstraction for Monad that\n  supports the notion of addition.", :jsdoc ("@interface")}, -mzero {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 90, :column 4, :end-line 90, :end-column 10, :protocol cats.protocols/MonadZero, :doc "The identity element for the given monadzero.", :arglists (quote ([m]))}, :protocol cats.protocols/MonadZero, :name cats.protocols/-mzero, :variadic false, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 10, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "The identity element for the given monadzero."}, -mreturn {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 84, :column 4, :end-line 84, :end-column 12, :protocol cats.protocols/Monad, :doc nil, :arglists (quote ([m v]))}, :protocol cats.protocols/Monad, :name cats.protocols/-mreturn, :variadic false, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 12, :method-params ([m v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 84, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m v])), :doc nil}, -pure {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 66, :column 4, :end-line 66, :end-column 9, :protocol cats.protocols/Applicative, :doc "Takes any context monadic value ctx and any value v, and puts\n     the value v in the most minimal context of same type of ctx", :arglists (quote ([app v]))}, :protocol cats.protocols/Applicative, :name cats.protocols/-pure, :variadic false, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 9, :method-params ([app v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app v])), :doc "Takes any context monadic value ctx and any value v, and puts\n     the value v in the most minimal context of same type of ctx"}, -fmap {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 59, :column 4, :end-line 59, :end-column 9, :protocol cats.protocols/Functor, :doc "Applies function f to the value(s) inside the context of the functor fv.", :arglists (quote ([ftor f fv]))}, :protocol cats.protocols/Functor, :name cats.protocols/-fmap, :variadic false, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 9, :method-params ([ftor f fv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 59, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ftor f fv])), :doc "Applies function f to the value(s) inside the context of the functor fv."}, MonadZero {:meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 87, :column 14, :end-line 87, :end-column 23, :doc "A complement abstraction for monad that\n  supports the notion of an identity element.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-mzero [[m]]}}}, :protocol-symbol true, :name cats.protocols/MonadZero, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 23, :column 1, :line 87, :protocol-info {:methods {-mzero [[m]]}}, :info nil, :end-line 87, :impls #{}, :doc "A complement abstraction for monad that\n  supports the notion of an identity element.", :jsdoc ("@interface")}, Semigroup {:meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 44, :column 14, :end-line 44, :end-column 23, :doc "A structure with an associative binary operation.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-mappend [[s sv sv']]}}}, :protocol-symbol true, :name cats.protocols/Semigroup, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 23, :column 1, :line 44, :protocol-info {:methods {-mappend [[s sv sv']]}}, :info nil, :end-line 44, :impls #{}, :doc "A structure with an associative binary operation.", :jsdoc ("@interface")}, Traversable {:meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 75, :column 14, :end-line 75, :end-column 25, :doc "Abstraction of data structures that can be traversed from left to right\n  performing an action on every element.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-traverse [[tctx f tv]]}}}, :protocol-symbol true, :name cats.protocols/Traversable, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 25, :column 1, :line 75, :protocol-info {:methods {-traverse [[tctx f tv]]}}, :info nil, :end-line 75, :impls #{}, :doc "Abstraction of data structures that can be traversed from left to right\n  performing an action on every element.", :jsdoc ("@interface")}, Monoid {:meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 48, :column 14, :end-line 48, :end-column 20, :doc "A Semigroup which has an identity element for is associative binary operation.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-mempty [[s]]}}}, :protocol-symbol true, :name cats.protocols/Monoid, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 20, :column 1, :line 48, :protocol-info {:methods {-mempty [[s]]}}, :info nil, :end-line 48, :impls #{}, :doc "A Semigroup which has an identity element for is associative binary operation.", :jsdoc ("@interface")}, Context {:meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 32, :column 14, :end-line 32, :end-column 21, :doc "A marker protocol for identifying the valid context types.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-get-level [[_]]}}}, :protocol-symbol true, :name cats.protocols/Context, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 21, :column 1, :line 32, :protocol-info {:methods {-get-level [[_]]}}, :info nil, :end-line 32, :impls #{}, :doc "A marker protocol for identifying the valid context types.", :jsdoc ("@interface")}, -get-level {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 34, :column 4, :end-line 34, :end-column 14, :protocol cats.protocols/Context, :doc "Get a context priority level.", :arglists (quote ([_]))}, :protocol cats.protocols/Context, :name cats.protocols/-get-level, :variadic false, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 14, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Get a context priority level."}, Extract {:meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 52, :column 14, :end-line 52, :end-column 21, :doc "A type class responsible of extract the\n  value from a monad context.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-extract [[mv]]}}}, :protocol-symbol true, :name cats.protocols/Extract, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 21, :column 1, :line 52, :protocol-info {:methods {-extract [[mv]]}}, :info nil, :end-line 52, :impls #{}, :doc "A type class responsible of extract the\n  value from a monad context.", :jsdoc ("@interface")}, Foldable {:meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 70, :column 14, :end-line 70, :end-column 22, :doc "Abstraction of data structures that can be folded to a summary value.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-foldl [[fctx f z xs]], -foldr [[fctx f z xs]]}}}, :protocol-symbol true, :name cats.protocols/Foldable, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 22, :column 1, :line 70, :protocol-info {:methods {-foldl [[fctx f z xs]], -foldr [[fctx f z xs]]}}, :info nil, :end-line 70, :impls #{}, :doc "Abstraction of data structures that can be folded to a summary value.", :jsdoc ("@interface")}, MonadTrans {:meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 97, :column 14, :end-line 97, :end-column 24, :doc "A monad transformer abstraction.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-lift [[m mv]]}}}, :protocol-symbol true, :name cats.protocols/MonadTrans, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 24, :column 1, :line 97, :protocol-info {:methods {-lift [[m mv]]}}, :info nil, :end-line 97, :impls #{}, :doc "A monad transformer abstraction.", :jsdoc ("@interface")}, -mappend {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 46, :column 4, :end-line 46, :end-column 12, :protocol cats.protocols/Semigroup, :doc "An associative addition operation.", :arglists (quote ([s sv sv']))}, :protocol cats.protocols/Semigroup, :name cats.protocols/-mappend, :variadic false, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 12, :method-params ([s sv sv']), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 46, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s sv sv'])), :doc "An associative addition operation."}, -mplus {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 95, :column 4, :end-line 95, :end-column 10, :protocol cats.protocols/MonadPlus, :doc "An associative addition operation.", :arglists (quote ([m mv mv']))}, :protocol cats.protocols/MonadPlus, :name cats.protocols/-mplus, :variadic false, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 10, :method-params ([m mv mv']), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 95, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m mv mv'])), :doc "An associative addition operation."}, -get-context {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 42, :column 4, :end-line 42, :end-column 16, :protocol cats.protocols/Contextual, :doc "Get the context associated with the type.", :arglists (quote ([_]))}, :protocol cats.protocols/Contextual, :name cats.protocols/-get-context, :variadic false, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 16, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Get the context associated with the type."}, -lift {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/cats/protocols.cljc", :line 99, :column 4, :end-line 99, :end-column 9, :protocol cats.protocols/MonadTrans, :doc "Lift a value from the parameterized monad to the transformer.", :arglists (quote ([m mv]))}, :protocol cats.protocols/MonadTrans, :name cats.protocols/-lift, :variadic false, :file "resources/public/js/compiled/out/cats/protocols.cljc", :end-column 9, :method-params ([m mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m mv])), :doc "Lift a value from the parameterized monad to the transformer."}}}