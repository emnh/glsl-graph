;; Analyzed by ClojureScript 1.7.145
{:use-macros nil, :excludes #{}, :name com.stuartsierra.dependency, :imports nil, :requires {set clojure.set, clojure.set clojure.set}, :uses nil, :defs {immediate-dependencies {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 15, :column 4, :end-line 15, :end-column 26, :protocol com.stuartsierra.dependency/DependencyGraph, :doc "Returns the set of immediate dependencies of node.", :arglists (quote ([graph node]))}, :protocol com.stuartsierra.dependency/DependencyGraph, :name com.stuartsierra.dependency/immediate-dependencies, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 26, :method-params ([graph node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([graph node])), :doc "Returns the set of immediate dependencies of node."}, remove-from-map {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 47, :column 8, :end-line 47, :end-column 23, :private true, :arglists (quote ([amap x]))}, :private true, :name com.stuartsierra.dependency/remove-from-map, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 23, :method-params ([amap x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([amap x]))}, remove-edge {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 38, :column 4, :end-line 38, :end-column 15, :protocol com.stuartsierra.dependency/DependencyGraphUpdate, :doc "Returns a new graph with the dependency from node to dep removed.", :arglists (quote ([graph node dep]))}, :protocol com.stuartsierra.dependency/DependencyGraphUpdate, :name com.stuartsierra.dependency/remove-edge, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 15, :method-params ([graph node dep]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 38, :max-fixed-arity 3, :fn-var true, :arglists (quote ([graph node dep])), :doc "Returns a new graph with the dependency from node to dep removed."}, MapDependencyGraph {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted com.stuartsierra.dependency/DependencyGraph cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable com.stuartsierra.dependency/DependencyGraphUpdate cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name com.stuartsierra.dependency/MapDependencyGraph, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 30, :type true, :column 12, :internal-ctor true, :line 69, :record true, :end-line 69, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, depends? {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 113, :column 7, :end-line 113, :end-column 15, :arglists (quote ([graph x y])), :doc "True if x is directly or transitively dependent on y."}, :name com.stuartsierra.dependency/depends?, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 15, :method-params ([graph x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 3, :fn-var true, :arglists (quote ([graph x y])), :doc "True if x is directly or transitively dependent on y."}, depend {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 35, :column 4, :end-line 35, :end-column 10, :protocol com.stuartsierra.dependency/DependencyGraphUpdate, :doc "Returns a new graph with a dependency from node to dep (\"node depends\n    on dep\"). Forbids circular dependencies.", :arglists (quote ([graph node dep]))}, :protocol com.stuartsierra.dependency/DependencyGraphUpdate, :name com.stuartsierra.dependency/depend, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 10, :method-params ([graph node dep]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 35, :max-fixed-arity 3, :fn-var true, :arglists (quote ([graph node dep])), :doc "Returns a new graph with a dependency from node to dep (\"node depends\n    on dep\"). Forbids circular dependencies."}, immediate-dependents {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 17, :column 4, :end-line 17, :end-column 24, :protocol com.stuartsierra.dependency/DependencyGraph, :doc "Returns the set of immediate dependents of node.", :arglists (quote ([graph node]))}, :protocol com.stuartsierra.dependency/DependencyGraph, :name com.stuartsierra.dependency/immediate-dependents, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 24, :method-params ([graph node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([graph node])), :doc "Returns the set of immediate dependents of node."}, transitive {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 52, :column 8, :end-line 52, :end-column 18, :private true, :arglists (quote ([neighbors node-set])), :doc "Recursively expands the set of dependency relationships starting\n  at (get neighbors x), for each x in node-set"}, :private true, :name com.stuartsierra.dependency/transitive, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 18, :method-params ([neighbors node-set]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([neighbors node-set])), :doc "Recursively expands the set of dependency relationships starting\n  at (get neighbors x), for each x in node-set"}, set-conj {:name com.stuartsierra.dependency/set-conj, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 67, :column 1, :end-line 67, :end-column 14, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 67, :column 6, :end-line 67, :end-column 14}}, remove-node {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 42, :column 4, :end-line 42, :end-column 15, :protocol com.stuartsierra.dependency/DependencyGraphUpdate, :doc "Removes the node from the dependency graph without removing it as a\n    dependency of other nodes. That is, removes all outgoing edges from\n    node.", :arglists (quote ([graph node]))}, :protocol com.stuartsierra.dependency/DependencyGraphUpdate, :name com.stuartsierra.dependency/remove-node, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 15, :method-params ([graph node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([graph node])), :doc "Removes the node from the dependency graph without removing it as a\n    dependency of other nodes. That is, removes all outgoing edges from\n    node."}, ->MapDependencyGraph {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 69, :column 12, :end-line 69, :end-column 30, :internal-ctor true, :factory :positional, :arglists (quote ([dependencies dependents]))}, :name com.stuartsierra.dependency/->MapDependencyGraph, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 30, :method-params ([dependencies dependents]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dependencies dependents]))}, max-number {:name com.stuartsierra.dependency/max-number, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 148, :column 1, :end-line 148, :end-column 26, :private true, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 148, :column 16, :end-line 148, :end-column 26, :private true}}, transitive-dependents-set {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 28, :column 4, :end-line 28, :end-column 29, :protocol com.stuartsierra.dependency/DependencyGraph, :doc "Returns the set of all things which depend upon any node in\n    node-set, directly or transitively.", :arglists (quote ([graph node-set]))}, :protocol com.stuartsierra.dependency/DependencyGraph, :name com.stuartsierra.dependency/transitive-dependents-set, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 29, :method-params ([graph node-set]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([graph node-set])), :doc "Returns the set of all things which depend upon any node in\n    node-set, directly or transitively."}, topo-comparator {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 152, :column 7, :end-line 152, :end-column 22, :arglists (quote ([graph])), :doc "Returns a comparator fn which produces a topological sort based on\n  the dependencies in graph. Nodes not present in the graph will sort\n  after nodes in the graph."}, :name com.stuartsierra.dependency/topo-comparator, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 22, :method-params ([graph]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 1, :fn-var true, :arglists (quote ([graph])), :doc "Returns a comparator fn which produces a topological sort based on\n  the dependencies in graph. Nodes not present in the graph will sort\n  after nodes in the graph."}, transitive-dependencies {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 19, :column 4, :end-line 19, :end-column 27, :protocol com.stuartsierra.dependency/DependencyGraph, :doc "Returns the set of all things which node depends on, directly or\n    transitively.", :arglists (quote ([graph node]))}, :protocol com.stuartsierra.dependency/DependencyGraph, :name com.stuartsierra.dependency/transitive-dependencies, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 27, :method-params ([graph node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([graph node])), :doc "Returns the set of all things which node depends on, directly or\n    transitively."}, map->MapDependencyGraph {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 69, :column 12, :end-line 69, :end-column 30, :internal-ctor true, :factory :map, :arglists (quote ([G__9175]))}, :name com.stuartsierra.dependency/map->MapDependencyGraph, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 30, :method-params ([G__9175]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9175]))}, DependencyGraph {:meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 14, :column 14, :end-line 14, :end-column 29, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {immediate-dependencies [[graph node]], immediate-dependents [[graph node]], transitive-dependencies [[graph node]], transitive-dependencies-set [[graph node-set]], transitive-dependents [[graph node]], transitive-dependents-set [[graph node-set]], nodes [[graph]]}}}, :protocol-symbol true, :name com.stuartsierra.dependency/DependencyGraph, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 29, :column 1, :line 14, :protocol-info {:methods {immediate-dependencies [[graph node]], immediate-dependents [[graph node]], transitive-dependencies [[graph node]], transitive-dependencies-set [[graph node-set]], transitive-dependents [[graph node]], transitive-dependents-set [[graph node-set]], nodes [[graph]]}}, :info nil, :end-line 14, :impls #{com.stuartsierra.dependency/MapDependencyGraph}, :doc nil, :jsdoc ("@interface")}, topo-sort {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 123, :column 7, :end-line 123, :end-column 16, :arglists (quote ([graph])), :doc "Returns a topologically-sorted list of nodes in graph."}, :name com.stuartsierra.dependency/topo-sort, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 16, :method-params ([graph]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([graph])), :doc "Returns a topologically-sorted list of nodes in graph."}, transitive-dependents {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 25, :column 4, :end-line 25, :end-column 25, :protocol com.stuartsierra.dependency/DependencyGraph, :doc "Returns the set of all things which depend upon node, directly or\n    transitively.", :arglists (quote ([graph node]))}, :protocol com.stuartsierra.dependency/DependencyGraph, :name com.stuartsierra.dependency/transitive-dependents, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 25, :method-params ([graph node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([graph node])), :doc "Returns the set of all things which depend upon node, directly or\n    transitively."}, nodes {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 31, :column 4, :end-line 31, :end-column 9, :protocol com.stuartsierra.dependency/DependencyGraph, :doc "Returns the set of all nodes in graph.", :arglists (quote ([graph]))}, :protocol com.stuartsierra.dependency/DependencyGraph, :name com.stuartsierra.dependency/nodes, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 9, :method-params ([graph]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([graph])), :doc "Returns the set of all nodes in graph."}, graph {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 110, :column 7, :end-line 110, :end-column 12, :arglists (quote ([])), :doc "Returns a new, empty, dependency graph."}, :name com.stuartsierra.dependency/graph, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a new, empty, dependency graph."}, DependencyGraphUpdate {:meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 34, :column 14, :end-line 34, :end-column 35, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {depend [[graph node dep]], remove-edge [[graph node dep]], remove-all [[graph node]], remove-node [[graph node]]}}}, :protocol-symbol true, :name com.stuartsierra.dependency/DependencyGraphUpdate, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 35, :column 1, :line 34, :protocol-info {:methods {depend [[graph node dep]], remove-edge [[graph node dep]], remove-all [[graph node]], remove-node [[graph node]]}}, :info nil, :end-line 34, :impls #{com.stuartsierra.dependency/MapDependencyGraph}, :doc nil, :jsdoc ("@interface")}, remove-all {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 40, :column 4, :end-line 40, :end-column 14, :protocol com.stuartsierra.dependency/DependencyGraphUpdate, :doc "Returns a new dependency graph with all references to node removed.", :arglists (quote ([graph node]))}, :protocol com.stuartsierra.dependency/DependencyGraphUpdate, :name com.stuartsierra.dependency/remove-all, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 14, :method-params ([graph node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([graph node])), :doc "Returns a new dependency graph with all references to node removed."}, dependent? {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 118, :column 7, :end-line 118, :end-column 17, :arglists (quote ([graph x y])), :doc "True if y is a dependent of x."}, :name com.stuartsierra.dependency/dependent?, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 17, :method-params ([graph x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 3, :fn-var true, :arglists (quote ([graph x y])), :doc "True if y is a dependent of x."}, transitive-dependencies-set {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :line 22, :column 4, :end-line 22, :end-column 31, :protocol com.stuartsierra.dependency/DependencyGraph, :doc "Returns the set of all things which any node in node-set depends\n    on, directly or transitively.", :arglists (quote ([graph node-set]))}, :protocol com.stuartsierra.dependency/DependencyGraph, :name com.stuartsierra.dependency/transitive-dependencies-set, :variadic false, :file "resources/public/js/compiled/out/com/stuartsierra/dependency.cljc", :end-column 31, :method-params ([graph node-set]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([graph node-set])), :doc "Returns the set of all things which any node in node-set depends\n    on, directly or transitively."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:com.stuartsierra.dependency/circular-dependency :dependency dependencies :dependents dependents :node :reason :dependencies}, :order [:dependencies :dependents :reason :node :dependency :com.stuartsierra.dependency/circular-dependency dependencies dependents]}, :doc "Bidirectional graphs of dependencies and dependent objects."}