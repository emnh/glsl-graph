;; Analyzed by ClojureScript 1.7.145
{:use-macros {defcom glsl-graph.macros, dosync javelin.core, cell= javelin.core}, :excludes #{}, :name glsl-graph.core, :imports nil, :requires {p promesa.core, promesa.core promesa.core, jayq jayq.core, javelin.core javelin.core, clojure.set clojure.set, m cats.core, cats.core cats.core, jayq.core jayq.core, com.stuartsierra.component com.stuartsierra.component, component com.stuartsierra.component, cset clojure.set}, :uses {cell javelin.core, $ jayq.core}, :defs {readd-component {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 47, :column 7, :end-line 47, :end-column 22, :arglists (quote ([system k v]))}, :name glsl-graph.core/readd-component, :variadic false, :file "src/glsl_graph/core.cljs", :end-column 22, :method-params ([system k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 3, :fn-var true, :arglists (quote ([system k v]))}, render-loop-screen {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 284, :column 7, :end-line 284, :end-column 25, :arglists (quote ([c o]))}, :name glsl-graph.core/render-loop-screen, :variadic false, :file "src/glsl_graph/core.cljs", :end-column 25, :method-params ([c o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 284, :end-line 284, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c o]))}, ->init-dat-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([dat-gui get-graph])), :file nil}, :name glsl-graph.core/->init-dat-Record, :variadic false, :file "src/glsl_graph/core.cljs", :method-params ([dat-gui get-graph]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 65, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dat-gui get-graph]))}, get-graph-Record {:num-fields 6, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name glsl-graph.core/get-graph-Record, :file "src/glsl_graph/core.cljs", :type true, :column 1, :internal-ctor true, :line 825, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, gen-texture {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 358, :column 7, :end-line 358, :end-column 18, :arglists (quote ([node-count edge-count tw th ew eh node-neighbours-startpos node-neighbours-flat]))}, :name glsl-graph.core/gen-texture, :variadic false, :file "src/glsl_graph/core.cljs", :end-column 18, :method-params ([node-count edge-count tw th ew eh node-neighbours-startpos node-neighbours-flat]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 358, :end-line 358, :max-fixed-arity 8, :fn-var true, :arglists (quote ([node-count edge-count tw th ew eh node-neighbours-startpos node-neighbours-flat]))}, ->resize-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([window])), :file nil}, :name glsl-graph.core/->resize-Record, :variadic false, :file "src/glsl_graph/core.cljs", :method-params ([window]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([window]))}, map->init-dat-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__7636])), :file nil}, :name glsl-graph.core/map->init-dat-Record, :variadic false, :file "src/glsl_graph/core.cljs", :method-params ([G__7636]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__7636]))}, main {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 849, :column 7, :end-line 849, :end-column 11, :arglists (quote ([]))}, :name glsl-graph.core/main, :variadic false, :file "src/glsl_graph/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 849, :end-line 849, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, map->init-stats-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__7645])), :file nil}, :name glsl-graph.core/map->init-stats-Record, :variadic false, :file "src/glsl_graph/core.cljs", :method-params ([G__7645]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__7645]))}, ran {:name glsl-graph.core/ran, :file "src/glsl_graph/core.cljs", :line 847, :column 1, :end-line 847, :end-column 13, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 847, :column 10, :end-line 847, :end-column 13}}, map->camera-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__7667])), :file nil}, :name glsl-graph.core/map->camera-Record, :variadic false, :file "src/glsl_graph/core.cljs", :method-params ([G__7667]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 156, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__7667]))}, map->init-scene-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__7679])), :file nil}, :name glsl-graph.core/map->init-scene-Record, :variadic false, :file "src/glsl_graph/core.cljs", :method-params ([G__7679]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 187, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__7679]))}, on-resize {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 208, :column 7, :end-line 208, :end-column 16, :arglists (quote ([c evt]))}, :name glsl-graph.core/on-resize, :variadic false, :file "src/glsl_graph/core.cljs", :end-column 16, :method-params ([c evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c evt]))}, data {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 38, :column 7, :end-line 38, :end-column 11, :arglists (quote ([component]))}, :name glsl-graph.core/data, :variadic false, :file "src/glsl_graph/core.cljs", :end-column 11, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component]))}, graph-url {:name glsl-graph.core/graph-url, :file "src/glsl_graph/core.cljs", :line 341, :column 1, :end-line 341, :end-column 15, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 341, :column 6, :end-line 341, :end-column 15}}, JSObj {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name glsl-graph.core/JSObj, :file "src/glsl_graph/core.cljs", :end-column 17, :type true, :column 12, :internal-ctor true, :line 23, :record true, :end-line 23, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, camera-Record {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name glsl-graph.core/camera-Record, :file "src/glsl_graph/core.cljs", :type true, :column 1, :internal-ctor true, :line 156, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, handle-graph-error {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 820, :column 7, :end-line 820, :end-column 25, :arglists (quote ([jqxhr status error]))}, :name glsl-graph.core/handle-graph-error, :variadic false, :file "src/glsl_graph/core.cljs", :end-column 25, :method-params ([jqxhr status error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 820, :end-line 820, :max-fixed-arity 3, :fn-var true, :arglists (quote ([jqxhr status error]))}, ->JSObj {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 23, :column 12, :end-line 23, :end-column 17, :internal-ctor true, :factory :positional, :arglists (quote ([initializer data]))}, :name glsl-graph.core/->JSObj, :variadic false, :file "src/glsl_graph/core.cljs", :end-column 17, :method-params ([initializer data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([initializer data]))}, sweet-alert {:name glsl-graph.core/sweet-alert, :file "src/glsl_graph/core.cljs", :line 19, :column 1, :end-line 19, :end-column 21, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 19, :column 10, :end-line 19, :end-column 21}}, map->resize-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__7691])), :file nil}, :name glsl-graph.core/map->resize-Record, :variadic false, :file "src/glsl_graph/core.cljs", :method-params ([G__7691]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__7691]))}, map->JSObj {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 23, :column 12, :end-line 23, :end-column 17, :internal-ctor true, :factory :map, :arglists (quote ([G__7625]))}, :name glsl-graph.core/map->JSObj, :variadic false, :file "src/glsl_graph/core.cljs", :end-column 17, :method-params ([G__7625]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__7625]))}, system {:name glsl-graph.core/system, :file "src/glsl_graph/core.cljs", :line 53, :column 1, :end-line 53, :end-column 16, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 53, :column 10, :end-line 53, :end-column 16}}, ->camera-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([window camera aspect])), :file nil}, :name glsl-graph.core/->camera-Record, :variadic false, :file "src/glsl_graph/core.cljs", :method-params ([window camera aspect]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 156, :max-fixed-arity 3, :fn-var true, :arglists (quote ([window camera aspect]))}, init-stats-Record {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name glsl-graph.core/init-stats-Record, :file "src/glsl_graph/core.cljs", :type true, :column 1, :internal-ctor true, :line 103, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->render-loop-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__7732])), :file nil}, :name glsl-graph.core/map->render-loop-Record, :variadic false, :file "src/glsl_graph/core.cljs", :method-params ([G__7732]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 322, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__7732]))}, window-Record {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name glsl-graph.core/window-Record, :file "src/glsl_graph/core.cljs", :type true, :column 1, :internal-ctor true, :line 139, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->init-scene-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([window renderer camera scene done set-size])), :file nil}, :name glsl-graph.core/->init-scene-Record, :variadic false, :file "src/glsl_graph/core.cljs", :method-params ([window renderer camera scene done set-size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 187, :max-fixed-arity 6, :fn-var true, :arglists (quote ([window renderer camera scene done set-size]))}, add-component {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 41, :column 7, :end-line 41, :end-column 20, :arglists (quote ([system k v]))}, :name glsl-graph.core/add-component, :variadic false, :file "src/glsl_graph/core.cljs", :end-column 20, :method-params ([system k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 3, :fn-var true, :arglists (quote ([system k v]))}, map->get-graph-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__7963])), :file nil}, :name glsl-graph.core/map->get-graph-Record, :variadic false, :file "src/glsl_graph/core.cljs", :method-params ([G__7963]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 825, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__7963]))}, handle-graph {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 429, :column 7, :end-line 429, :end-column 19, :arglists (quote ([c graph-data status jqxhr]))}, :name glsl-graph.core/handle-graph, :variadic false, :file "src/glsl_graph/core.cljs", :end-column 19, :method-params ([c graph-data status jqxhr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 429, :end-line 429, :max-fixed-arity 4, :fn-var true, :arglists (quote ([c graph-data status jqxhr]))}, three {:name glsl-graph.core/three, :file "src/glsl_graph/core.cljs", :line 17, :column 1, :end-line 17, :end-column 15, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 17, :column 10, :end-line 17, :end-column 15}}, ajax {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 343, :column 7, :end-line 343, :end-column 11, :arglists (quote ([url data-type]))}, :name glsl-graph.core/ajax, :variadic false, :file "src/glsl_graph/core.cljs", :end-column 11, :method-params ([url data-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 2, :fn-var true, :arglists (quote ([url data-type]))}, ->window-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([width height])), :file nil}, :name glsl-graph.core/->window-Record, :variadic false, :file "src/glsl_graph/core.cljs", :method-params ([width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 139, :max-fixed-arity 2, :fn-var true, :arglists (quote ([width height]))}, THREE {:name glsl-graph.core/THREE, :file "src/glsl_graph/core.cljs", :line 18, :column 1, :end-line 18, :end-column 15, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 18, :column 10, :end-line 18, :end-column 15}}, ->init-stats-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([render-stats physics-stats])), :file nil}, :name glsl-graph.core/->init-stats-Record, :variadic false, :file "src/glsl_graph/core.cljs", :method-params ([render-stats physics-stats]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 103, :max-fixed-arity 2, :fn-var true, :arglists (quote ([render-stats physics-stats]))}, init-dat-Record {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name glsl-graph.core/init-dat-Record, :file "src/glsl_graph/core.cljs", :type true, :column 1, :internal-ctor true, :line 65, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->window-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__7658])), :file nil}, :name glsl-graph.core/map->window-Record, :variadic false, :file "src/glsl_graph/core.cljs", :method-params ([G__7658]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__7658]))}, render-loop-Record {:num-fields 8, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name glsl-graph.core/render-loop-Record, :file "src/glsl_graph/core.cljs", :type true, :column 1, :internal-ctor true, :line 322, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, render-loop-compute {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 232, :column 7, :end-line 232, :end-column 26, :arglists (quote ([c o]))}, :name glsl-graph.core/render-loop-compute, :variadic false, :file "src/glsl_graph/core.cljs", :end-column 26, :method-params ([c o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c o]))}, init-scene-Record {:num-fields 6, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name glsl-graph.core/init-scene-Record, :file "src/glsl_graph/core.cljs", :type true, :column 1, :internal-ctor true, :line 187, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->get-graph-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([renderer scene camera init-scene render-options-ready render-options])), :file nil}, :name glsl-graph.core/->get-graph-Record, :variadic false, :file "src/glsl_graph/core.cljs", :method-params ([renderer scene camera init-scene render-options-ready render-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 825, :max-fixed-arity 6, :fn-var true, :arglists (quote ([renderer scene camera init-scene render-options-ready render-options]))}, on-js-reload {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 874, :column 7, :end-line 874, :end-column 19, :arglists (quote ([]))}, :name glsl-graph.core/on-js-reload, :variadic false, :file "src/glsl_graph/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 874, :end-line 874, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ->render-loop-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([renderer camera scene init-scene get-graph render-stats physics-stats running])), :file nil}, :name glsl-graph.core/->render-loop-Record, :variadic false, :file "src/glsl_graph/core.cljs", :method-params ([renderer camera scene init-scene get-graph render-stats physics-stats running]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 322, :max-fixed-arity 8, :fn-var true, :arglists (quote ([renderer camera scene init-scene get-graph render-stats physics-stats running]))}, new-jsobj {:protocol-inline nil, :meta {:file "/home/emh/github/glsl-graph/src/glsl_graph/core.cljs", :line 35, :column 7, :end-line 35, :end-column 16, :arglists (quote ([initializer]))}, :name glsl-graph.core/new-jsobj, :variadic false, :file "src/glsl_graph/core.cljs", :end-column 16, :method-params ([initializer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([initializer]))}, resize-Record {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name glsl-graph.core/resize-Record, :file "src/glsl_graph/core.cljs", :type true, :column 1, :internal-ctor true, :line 216, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}}, :require-macros {macros glsl-graph.macros, glsl-graph.macros glsl-graph.macros, m cats.core, cats.core cats.core, javelin.core javelin.core}, :cljs.analyzer/constants {:seen #{:render-loop init-scene :needsUpdate :aspect initializer :transparent :USE3D :vertexShader :screen-camera set-size :done :u_node_count :u_pass_texture height :init-stats :get-graph :SQEDGE data :u_iteration :recordsPerEdge :else :velocity-material scene :a_displacement_index :render-options-ready :rt-velocities2 :top :defines :uniforms :position-material aspect :value :render-stats :u_time done :width :render-options :rt-velocities1 :rt-positions1 :type get-graph :a_color :resize :window render-options-ready :u_spring_length :renderer :screen-uniforms :running :rt-positions2 :raycaster render-stats :c :physics-stats :u_speed_reduction :u_texture_velocities :t-edges width :EDGECOUNT render-options :z-index :dat-gui :mesh :u_min_dist window running :NODECOUNT renderer :camera :depthWrite :position :u_texture_edges physics-stats :u_dist_reduction :u_time_old dat-gui :init-scene :light :u_time_delta :init-dat :SQNODE :u_resolution :initializer :keywordize-keys :u_texture_positions :u_spring_coefficient :blending :set-size :links camera :height :fragmentShader :scene :screen-scene :data}, :order [:initializer :data initializer data :renderer :scene :raycaster :light :render-stats :physics-stats :dat-gui :get-graph :render-options-ready :render-options :uniforms dat-gui get-graph :init-dat :position :top :z-index render-stats physics-stats :init-stats :width :height width height :window :camera :aspect window camera aspect :done :set-size renderer scene done set-size :init-scene :resize :running :rt-positions2 :rt-velocities2 :t-edges :mesh :velocity-material :rt-velocities1 :position-material :rt-positions1 :screen-uniforms :screen-camera :screen-scene init-scene running :render-loop :keywordize-keys :recordsPerEdge :links :NODECOUNT :EDGECOUNT :SQNODE :SQEDGE :USE3D :u_node_count :u_iteration :u_time :u_spring_length :u_speed_reduction :u_texture_velocities :u_min_dist :u_texture_edges :u_dist_reduction :u_time_old :u_time_delta :u_resolution :u_texture_positions :u_spring_coefficient :type :value :u_pass_texture :defines :vertexShader :fragmentShader :depthWrite :a_displacement_index :a_color :needsUpdate :transparent :blending :c render-options-ready render-options :else]}, :doc nil}